<Application x:Class="Hospipal.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:properties="clr-namespace:Hospipal.Properties"
             StartupUri="MainWindow.xaml">



    <Application.Resources>

        <!-- Default custom fonts -->
        <Style x:Key="titleStyle" TargetType="{x:Type Control}">
            <Setter Property="FontSize" Value="20px"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <Style x:Key="headerStyle" TargetType="{x:Type Control}">
            <Setter Property="FontSize" Value="15px"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <Style x:Key="textStyle" TargetType="{x:Type Control}">
            <Setter Property="FontSize" Value="13px"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
        </Style>
        
        <!-- Text Box Styles -->

        <!-- Highlights a non-empty textbox -->
        <Style TargetType="{x:Type TextBox}" >
            <EventSetter Event="TextChanged" Handler="highlightBox">
            </EventSetter>
        </Style>

        <!-- Makes textboxes numeric only input-->
        <Style TargetType="{x:Type TextBox}" x:Key="Numeric" BasedOn="{StaticResource textStyle}">
            <EventSetter Event="PreviewTextInput" Handler="checkInput">
            </EventSetter>
            <EventSetter Event="TextChanged" Handler="highlightBox">
            </EventSetter>
            <EventSetter Event="DataObject.Pasting" Handler="noPaste">
            </EventSetter>
        </Style>
    <!-- Postal Code -->
        <Style TargetType="{x:Type TextBox}" x:Key="postalCode" BasedOn="{StaticResource textStyle}">
            <EventSetter Event="PreviewTextInput" Handler="checkPostalCode">
            </EventSetter>
        </Style>

        <!-- Makes textboxes numeric and letter only input-->
        <Style TargetType="{x:Type TextBox}" x:Key="AlphaAndNumeric" BasedOn="{StaticResource textStyle}">
            <EventSetter Event="PreviewTextInput" Handler="checkInputLetters">
            </EventSetter>
            <EventSetter Event="TextChanged" Handler="highlightBox">
            </EventSetter>
            <EventSetter Event="DataObject.Pasting" Handler="noPaste">
            </EventSetter>
        </Style>

        <!-- Textbox with this style is a required field-->
        <Style TargetType="{x:Type TextBox}" x:Key="RequiredField" BasedOn="{StaticResource textStyle}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                    <Setter Property="TextBox.ToolTip" Value="Input value is mandatory" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Required Field and Numeric Only-->
        <Style TargetType="{x:Type TextBox}" x:Key="NumericRequiredField" BasedOn="{StaticResource textStyle}">
            <EventSetter Event="PreviewTextInput" Handler="checkInput">
            </EventSetter>
            <EventSetter Event="TextChanged" Handler="highlightBox">
            </EventSetter>
            <EventSetter Event="DataObject.Pasting" Handler="noPaste">
            </EventSetter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                    <Setter Property="TextBox.ToolTip" Value="Input value is mandatory" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Button Styles -->

        <!-- This set of styles all hide buttons on certain screens based on which datagrid has an item selected-->

        <!-- Hides the Patient Edit and Delete button if there is no selected row.-->
        <Style TargetType="{x:Type Button}" x:Key="PatientButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=Patients_DataGrid, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Employee Edit and Delete button if there is no selected row.-->
        <Style TargetType="{x:Type Button}" x:Key="EmployeeButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=Employee_DataGrid, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Stop Button if there is no current treatment.-->
        <Style TargetType="{x:Type Button}" x:Key="StopButton">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=currentDatetb, Path=Text.Length}" 
                     Value="0">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Ward Edit and Delete button as well as Room Add Button if there is no selected ward.-->
        <Style TargetType="{x:Type Button}" x:Key="WardButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=WardDG, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Room Delete button and Bed Add and Delete Button if there is no selected row.-->
        <Style TargetType="{x:Type Button}" x:Key="RoomButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=RoomDG, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <!-- Hides the Treatment Edit and Delete button if there is no selected row.-->
        <Style TargetType="{x:Type Button}" x:Key="TreatmentButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=boxHistory, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Waitlist Add button if there is no selected row.-->
        <Style TargetType="{x:Type Button}" x:Key="WaitlistButton">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=PatientWaitlistDG, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
                <DataTrigger
                    Binding="{Binding ElementName=OpenBedsDG, Path=SelectedIndex}"
                    Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Waitlist Refresh button if there is no selected ward.-->
        <Style TargetType="{x:Type Button}" x:Key="RefreshWaitlistButton">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=WardSelectionBox, Path=SelectedIndex}" 
                     Value="-1">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Image">
            <Setter Property="Image.Width" Value="54"/>
            <Setter Property="Image.Height" Value="54"/>
        </Style>
        
        <!-- Hides the Schedule Edit and Delete button if there is no appointment selected.-->
        <Style TargetType="{x:Type Button}" x:Key="ScheduleDelEditButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=scheduleView, Path=SelectedAppointment}" 
                     Value="{x:Null}">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides the Schedule Add button if there is no appointment selected.-->
        <Style TargetType="{x:Type Button}" x:Key="ScheduleAddButtons">
            <Style.Triggers>
                <DataTrigger 
                     Binding ="{Binding ElementName=scheduleView, Path=SelectedSlot}" 
                     Value="{x:Null}">
                    <Setter Property="Button.Visibility" Value="Hidden"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hiding elements based on user roles -->
        <!-- This set of styles all hide controls on certain screens based on which user role type is accessing the system-->
        
        <!-- Hides control from doctors and nurses-->
        <Style TargetType="{x:Type Control}" x:Key="CollapsedWhenEmployee" >
            <Style.Setters>
                <Setter Property="Visibility" Value="Visible" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=Role, Mode=TwoWay}" Value="Nurse">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Control}" x:Key="HiddenWhenEmployee" >
            <Style.Setters>
                <Setter Property="Visibility" Value="Visible" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=Role, Mode=TwoWay}" Value="Nurse">
                    <Setter Property="Visibility" Value="Hidden" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Hides control from support staff-->
        <Style TargetType="{x:Type Control}" x:Key="CollapsedWhenSupportStaff" >
            <Style.Setters>
                <Setter Property="Visibility" Value="Visible" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=Role, Mode=TwoWay}" Value="Nurse">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Control}" x:Key="HiddenWhenSupportStaff" >
            <Style.Setters>
                <Setter Property="Visibility" Value="Visible" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=Role, Mode=TwoWay}" Value="Nurse">
                    <Setter Property="Visibility" Value="Hidden" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Brush Resources-->
            
        <!-- Required field indicator brush-->
        <LinearGradientBrush x:Uid="LinearGradientBrush_1" x:Key="FaultyBorderBrush" EndPoint="0,20" StartPoint="0,0" MappingMode="Absolute">
            <GradientStop x:Uid="GradientStop_1" Color="#FFABADB3" Offset="0.05"/>
            <GradientStop x:Uid="GradientStop_2" Color="#FFE2E3EA" Offset="0.07"/>
            <GradientStop x:Uid="GradientStop_3" Color="#FFFF0000" Offset="1"/>
        </LinearGradientBrush>

    </Application.Resources>
</Application>
